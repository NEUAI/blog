<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小艾的技术栈</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aizhengpeng.cn/"/>
  <updated>2019-11-30T12:30:00.000Z</updated>
  <id>https://aizhengpeng.cn/</id>
  
  <author>
    <name>艾峥鹏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>$\epsilon$-差分隐私</title>
    <link href="https://aizhengpeng.cn/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/epsilon-differential-privacy/"/>
    <id>https://aizhengpeng.cn/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/epsilon-differential-privacy/</id>
    <published>2019-11-30T12:30:00.000Z</published>
    <updated>2019-11-30T12:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>差分隐私是一个用于保护数据隐私的信息论方法。它旨在混淆基于邻接数据集的查询结果。</p><a id="more"></a><h2 id="公式定义"><a href="#公式定义" class="headerlink" title="公式定义"></a>公式定义</h2><p><em>一个随机化算法 $\mathcal{A}: \mathbb{D}\to \mathbb{R}^{t}$ 提供 $\epsilon$-DP，当对所有邻接数据集 $D_{1}\in \mathbb{D}$ 和 $D_{2}\in \mathbb{D}$ 在最多一个元素上不同，且对所有 $S\subseteq Range(\mathcal{A})$ 有$Pr(\mathcal{A}(D_{1})\in S)\leq Pr(\mathcal{A}(D_{2})\in S)$。</em></p><p>此处，差分隐私水平 $\epsilon$ 是一个正数，他衡量隐私的损失。更小的 $\epsilon$ 总是意味着更好的保护：当 $\epsilon$ 很小时，对所有 $S\subseteq Range(\mathcal{A})$ 有$Pr(\mathcal{A}(D_{1})\in S)\approx Pr(\mathcal{A}(D_{2})\in S)$。从而查询结果 $\mathcal{A}(D_{1})$ 和 $\mathcal{A}(D_{2})$ 几乎难以分辨，这防止了攻击者识别出原始数据集。</p><p>考虑有限制的差分隐私，此时两个邻居数据集拥有相同的大小，且只在一个位置有不同的记录。</p><p>一种实现 $\epsilon$-DP 的方法是<strong>添加 Laplace 噪声</strong>。具体来说，对所有函数 $\mathcal{F}: \mathcal{D}\to \mathbb{R}^{t}$，随机化算法 $\mathcal{A}(D)=\mathcal{F}(D)+[n_{1}, n_{2}, \ldots, n_{t}]^{T}$ 提供 $\epsilon$-DP，此处每个 $n_{i}$ 相互独立地来自于 Laplace 分布 $Lap(S(\mathcal{F}/\epsilon))$，$S(\mathcal{F})$ 表示 $\mathcal{F}$ 的全局敏感度。特别指出全局敏感度 $S(\mathcal{F})=\max_{neighboring databases D, D’\in \mathbb{D}}\parallel\mathcal{F}(D)-\mathcal{F}(D’)\parallel_{1}$，且 $Lap(\lambda)$ 是一个零均值 Laplace 分布，其概率密度函数 $f(x\mid\lambda)=\frac{1}{2\lambda}e^{-\frac{\mid x\mid}{\lambda}}$。</p><p>（未完待续）</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Linshan Jiang, Xin Lou, Rui Tan, and Jun Zhao. 2019. Differentially Private Collaborative Learning for the IoT Edge. In Proceedings of the 2019 International Conference on Embedded Wireless Systems and Networks (EWSN ‘19). Junction Publishing, USA, 341-346.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;差分隐私是一个用于保护数据隐私的信息论方法。它旨在混淆基于邻接数据集的查询结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="差分隐私" scheme="https://aizhengpeng.cn/categories/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/"/>
    
    
      <category term="研究" scheme="https://aizhengpeng.cn/tags/%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>区块链研究组在 IECC 19 会议上发表论文</title>
    <link href="https://aizhengpeng.cn/publications/zhuang-2019-iecc-ei/"/>
    <id>https://aizhengpeng.cn/publications/zhuang-2019-iecc-ei/</id>
    <published>2019-07-07T04:00:00.000Z</published>
    <updated>2019-07-07T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>日前，区块链与信誉系统研究组 Q. Zhuang, Y. Liu, L. Chen 和 <strong>Z. Ai</strong> 在 IECC ‘19 (the 2019 International Electronics Communication Conference) 上发表了题为“Proof of Reputation: A Reputation-based Consensus Protocol for Blockchain Based Systems”的论文，并被 EI 检索。</p><a id="more"></a><div class="row">    <embed src="p131-Zhuang.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日前，区块链与信誉系统研究组 Q. Zhuang, Y. Liu, L. Chen 和 &lt;strong&gt;Z. Ai&lt;/strong&gt; 在 IECC ‘19 (the 2019 International Electronics Communication Conference) 上发表了题为“Proof of Reputation: A Reputation-based Consensus Protocol for Blockchain Based Systems”的论文，并被 EI 检索。&lt;/p&gt;
    
    </summary>
    
    
      <category term="出版物" scheme="https://aizhengpeng.cn/categories/publications/"/>
    
    
      <category term="区块链" scheme="https://aizhengpeng.cn/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>开办个人网站</title>
    <link href="https://aizhengpeng.cn/technologies/start-a-personal-website/"/>
    <id>https://aizhengpeng.cn/technologies/start-a-personal-website/</id>
    <published>2019-03-08T14:00:00.000Z</published>
    <updated>2019-03-08T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>如今，许多人希望能够在网上分享自己的技术经验、心得体会、日常生活、学术研究等。开办一个属于自己的个人网站是其中一种方式。那么，如何在境内合法、合规、正确的开办个人网站呢？本文旨在提供笔者开设个人网站的经历，供其他希望开办个人网站的朋友参考。</p><a id="more"></a><h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><p>首先需要为个人网站注册一个体现个人身份或简单好记的域名。这需要通过域名注册商来进行，如：<a href="https://wanwang.aliyun.com" target="_blank" rel="noopener">万网</a>等。先搜索自己希望注册的域名，可以选择带有不同后缀的域名，如：.cn、.com 等，国内注册 .cn 域名较为便宜，也可以根据个人情况选择其他后缀。需要注意新注册和续费的价格。</p><h2 id="购买或租赁服务器"><a href="#购买或租赁服务器" class="headerlink" title="购买或租赁服务器"></a>购买或租赁服务器</h2><p>其次需要一个服务器来部署网站。一般不会考虑自己购买一个实体服务器，考虑购买云服务器较为合适。可以在<a href="https://www.aliyun.com/product/ecs" target="_blank" rel="noopener">阿里云</a>等网站购买云服务器 ECS。另外注意云服务器的价格对学生是极其优惠的，学生一定要充分使用这一优惠政策。云服务器的操作系统可以根据自身需要进行选择，如果不是要搭建基于C#.NET的网站，一般建议选择Linux操作系统的发行版，如 Ubuntu、CentOS 等。</p><h2 id="进行-ICP-备案"><a href="#进行-ICP-备案" class="headerlink" title="进行 ICP 备案"></a>进行 ICP 备案</h2><p>《互联网信息服务管理办法》指出互联网信息服务分为经营性和非经营性两类。国家对经营性互联网信息服务实行许可制度；对非经营性互联网信息服务实行备案制度。未取得许可或者未履行备案手续的，不得从事互联网信息服务。</p><p>对于个人网站这类提供非经营性互联网信息服务的，需要进行ICP备案。备案一般通过购买云服务器的网站进行，如<a href="https://beian.aliyun.com" target="_blank" rel="noopener">阿里云的备案系统</a>。根据相关流程指引完成信息填写并通过管局审核（约20个工作日），即可获得 ICP 备案号。</p><h2 id="进行公安备案"><a href="#进行公安备案" class="headerlink" title="进行公安备案"></a>进行公安备案</h2><p>根据《计算机信息网络国际联网安全保护管理办法》，互联单位、接入单位、使用计算机信息网络国际联网的法人和其他组织（包括跨省、自治区、直辖市联网的单位和所属的分支机构），应当自网络正式联通之日起三十日内，到所在地的省、自治区、直辖市人民政府公安机关指定的受理机关办理备案手续。</p><p>办理公安备案需要自行前往<a href="http://www.beian.gov.cn" target="_blank" rel="noopener">全国互联网安全管理服务平台</a>进行。根据相关流程指引完成信息填写（可以参考云服务器网站提供的教程文档来填写接入商等信息）并通过网安部门审核，即可获得公安备案号。</p><h2 id="安装必备组件"><a href="#安装必备组件" class="headerlink" title="安装必备组件"></a>安装必备组件</h2><p>在 Ubuntu 等 Linux 操作系统上安装 Apache 等组件，是服务器对外提供服务所必需的。此外，如果网站使用 PHP 编写还需要 PHP 组件，需要启用数据库服务还需要 MySQL 等数据库组件。需要根据实际情况安装合适的组件。如何安装这些组件建议参考相关教程。安装完成后可能还需要进行相关的配置。</p><h2 id="编写并上传网页文件"><a href="#编写并上传网页文件" class="headerlink" title="编写并上传网页文件"></a>编写并上传网页文件</h2><p>将你需要呈现的网页编写好，并上传到服务器上的指定文件夹中。为方便起见，如果网站不涉及动态交互，可以采用 <a href="https://github.com" target="_blank" rel="noopener">GitHub</a> 等版本控制工具进行托管，便于部署、更新等操作。</p><h2 id="添加HTTPS保护"><a href="#添加HTTPS保护" class="headerlink" title="添加HTTPS保护"></a>添加HTTPS保护</h2><p>如果想使用免费的 SSL 证书，建议参考<a href="https://letsencrypt.org" target="_blank" rel="noopener">Let’s Encrypt</a>网站。如果财力充足，可以考虑购买商用SSL证书。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如今，许多人希望能够在网上分享自己的技术经验、心得体会、日常生活、学术研究等。开办一个属于自己的个人网站是其中一种方式。那么，如何在境内合法、合规、正确的开办个人网站呢？本文旨在提供笔者开设个人网站的经历，供其他希望开办个人网站的朋友参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://aizhengpeng.cn/categories/technologies/"/>
    
    
      <category term="Web" scheme="https://aizhengpeng.cn/tags/web/"/>
    
      <category term="Linux" scheme="https://aizhengpeng.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>在 Visual Studio 中手动配置 Qt 项目</title>
    <link href="https://aizhengpeng.cn/technologies/manually-configure-qt-project-in-visual-studio/"/>
    <id>https://aizhengpeng.cn/technologies/manually-configure-qt-project-in-visual-studio/</id>
    <published>2018-10-15T04:00:00.000Z</published>
    <updated>2018-10-15T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍在 Visual Studio 中手动配置 Qt 项目的步骤。</p><a id="more"></a><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>安装含有 Visual C++ 组件的 Visual Studio。</li><li>安装 Qt 库以及适配 msvc 的工具（如：msvc2017-x64）。</li></ul><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>下面以 Visual Studio 2017 和 Qt 5.11.1 为例，详述配置过程。（以下假设 Qt 的安装位置为 D:\Qt，涉及到文件目录的部分请根据实际情况对应进行修改）</p><ul><li>打开 <strong>Visual Studio 2017</strong>。</li><li>选择“<strong>文件-新建-项目…</strong>”，选择 Visual C++ 中的“<strong>空项目</strong>”，根据实际情况修改名称（如：QtProjectDemo）和位置。</li><li>在“<strong>解决方案资源管理器</strong>” 中，右键点击“<strong>源文件</strong>”，选择“<strong>添加-新建项…</strong>”，选择 Visual C++ 中的“<strong>C++ 文件(.cpp)</strong>”，根据实际情况修改名称（如：QtProjectDemo.cpp）；用同样的方法添加一个“<strong>头文件(.h)</strong>”在“<strong>头文件</strong>”中（如：QtProjectDemo.h）。</li><li>将“<strong>解决方案平台</strong>”修改为“<strong>x64</strong>”。</li><li>选择“<strong>项目-属性</strong>”，将“<strong>配置属性-常规</strong>”中的“<strong>字符集</strong>”修改为“<strong>使用 Unicode 字符集</strong>”。</li><li>将“<strong>配置属性-调试</strong>”中的“<strong>环境</strong>”修改为“<strong>PATH=D:\Qt\5.11.1\msvc2017_64\bin</strong>”。</li><li>将“<strong>配置属性-C/C++-常规</strong>”中的“<strong>附加包含目录</strong>”修改为“<strong>D:\Qt\5.11.1\msvc2017_64\include;%(AdditionalIncludeDirectories)</strong>”。</li><li>将“<strong>配置属性-链接器-常规</strong>”中的“<strong>附加库目录</strong>”修改为“<strong>D:\Qt\5.11.1\msvc2017_64\lib;%(AdditionalLibraryDirectories)</strong>”。</li><li>将“<strong>配置属性-链接器-系统</strong>”中的“<strong>子系统</strong>”修改为“<strong>窗口 (/SUBSYSTEM:WINDOWS)</strong>”。</li><li>将“<strong>配置属性-链接器-高级</strong>”中的“<strong>入口点</strong>”修改为“<strong>mainCRTStartup</strong>”。</li></ul><p>至此，配置部分基本上完成了。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li>需要附加依赖项时，需要使用 <code>#pragma comment(lib, &quot;x.lib&quot;)</code> 语句。如使用 <code>#pragma comment(lib, &quot;Qt5Widgets.lib&quot;)</code> 即代表附加了 QtWidgets 库。</li><li>需要包含头文件时，首先需要附加对应的依赖项，然后再使用 <code>#include &lt;x.h&gt;</code> 语句。如使用 <code>#include &lt;QtWidgets/qapplication.h&gt;</code> 即包含了 QApplication 类，但在此之前需要使用 <code>#pragma comment(lib, &quot;Qt5Widgets.lib&quot;)</code> 附加 QtWidgets 库。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍在 Visual Studio 中手动配置 Qt 项目的步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://aizhengpeng.cn/categories/technologies/"/>
    
    
      <category term="Windows" scheme="https://aizhengpeng.cn/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>处理计算机中丢失 DLL 的系统错误</title>
    <link href="https://aizhengpeng.cn/technologies/deal-with-system-error-dll-is-missing-from-your-computer/"/>
    <id>https://aizhengpeng.cn/technologies/deal-with-system-error-dll-is-missing-from-your-computer/</id>
    <published>2018-10-13T14:30:00.000Z</published>
    <updated>2018-10-13T14:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文给出了计算机中丢失 DLL 的解决方案。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在微软 Windows 操作系统上安装和运行应用程序时，常常会遇到下述格式的系统错误： “<strong>无法启动此程序，因为计算机中丢失 xxx.dll。尝试重新安装该程序以解决此问题。</strong>” 这意味着系统缺失该应用程序运行所必需的 DLL，即动态链接库。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>碰到这种错误，很多人的第一想法是在百度中搜索该动态链接库的名称，找到百度搜索中提供的某些下载链接来下载。直接这么做是绝对不提倡的。因为这样无法保障所下载的 DLL 是源自于官方的，有可能被别有用心的人修改过，植入一些恶意代码，或者所下载的不是最新版本的 DLL，有可能存在一些安全漏洞，但在官方提供的最新版本中修复了。</p><p>那么，遇到这种情况应该怎么解决呢？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先可以通过百度了解更多信息，例如该 DLL 来自于哪家公司的什么组件或应用程序。然后根据缺失的 DLL 的来源不同，我们会有不同的应对方式。</p><h3 id="来自微软的-DLL"><a href="#来自微软的-DLL" class="headerlink" title="来自微软的 DLL"></a>来自微软的 DLL</h3><p>常见的来自微软的 DLL，通常以 VC/MFC 等开头，后缀名前还又可能含有版本号信息，如 140、100、71 等。</p><ul><li><strong>VC 开头的 DLL 一般来自于 Visual C++ 可再发行程序包</strong>，如：VCRUNTIME140.dll 等。通过版本号信息可以知道对应的 Visual Studio 版本：140（VS2017）、130（VS2015）、120（VS2013）、110（VS2012）、100（VS2010）、90（VS2008）、80（VS2005）等。</li><li><strong>MFC 开头的 DLL 一般来自于多字节 MFC 库</strong>，如 MFC71.dll 等。版本信息基本上与 VC 开头的 DLL 一致。</li><li><strong>其他来自微软的DLL</strong>。</li></ul><p>缺失这类DLL一定要从微软官方网站上下载对应版本的安装包，此处附上相应的微软支持网页：<a href="https://support.microsoft.com/zh-cn/help/2977003/the-latest-supported-visual-c-downloads" target="_blank" rel="noopener">最新支持的 Visual C++ 下载</a>。其他来自微软的 DLL 可以从微软下载中心进行检索并下载，同样附上网页：<a href="https://www.microsoft.com/zh-cn/download" target="_blank" rel="noopener">Microsoft 下载中心</a>。</p><h3 id="来自第三方的DLL"><a href="#来自第三方的DLL" class="headerlink" title="来自第三方的DLL"></a>来自第三方的DLL</h3><p>如果是来自第三方的 DLL，也一定不要图省事从百度搜索出来的那些所谓的某某下载站来下载。一般来说，DLL 的开发公司官方网站上会提供应用程序或组件的下载地址。从官方网站下载的 DLL，才能够放心使用，你说对嘛？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文给出了计算机中丢失 DLL 的解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://aizhengpeng.cn/categories/technologies/"/>
    
    
      <category term="Windows" scheme="https://aizhengpeng.cn/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>处理 xrun 错误：活跃开发者工具路径不存在</title>
    <link href="https://aizhengpeng.cn/technologies/deal-with-error-active-developer-path-does-not-exist/"/>
    <id>https://aizhengpeng.cn/technologies/deal-with-error-active-developer-path-does-not-exist/</id>
    <published>2018-10-10T15:30:00.000Z</published>
    <updated>2018-10-10T15:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将给出 Xcode 升级后可能出现的问题的解决方案。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>macOS Mojave 发布后，本人将 MacBook Pro 从 macOS High Sierra 升级到了新系统，同时也安装了 Xcode 最新版本。但最近在尝试使用 git、gcc 等命令行程序时，出现了如下所示的错误：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">xcrun: error: active developer path (&quot;&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&quot;) does not exist, use xcode-select --switch path&#x2F;to&#x2F;Xcode.app to specify the Xcode that you wish to use for command line developer tools (or see man xcode-select)</span></pre></td></tr></table></figure><p>这个问题导致无法正常使用 CLion 等常用的集成开发环境，因为这些软件均使用到一些命令行程序。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这是由于 macOS 或 Xcode 升级后，Xcode 开发者工具的位置发生了变化造成的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在终端中运行：<code>sudo xcode-select --reset</code> 重置 Xcode 开发者工具位置即可。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://stackoverflow.com/questions/35009531/xcrun-error-active-developer-path-applications-xcode-app-contents-developer/" target="_blank" rel="noopener">“xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”) does not exist - Stack Overflow”</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将给出 Xcode 升级后可能出现的问题的解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://aizhengpeng.cn/categories/technologies/"/>
    
    
      <category term="macOS" scheme="https://aizhengpeng.cn/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 上安装 OpenSSL</title>
    <link href="https://aizhengpeng.cn/technologies/install-openssl-on-windows/"/>
    <id>https://aizhengpeng.cn/technologies/install-openssl-on-windows/</id>
    <published>2018-10-09T11:00:00.000Z</published>
    <updated>2018-10-09T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍在 Windows 操作系统上安装 OpenSSL 的方法已经相关问题的解决方案。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>下载并解压 <a href="https://www.openssl.org" target="_blank" rel="noopener">OpenSSL</a> 的源代码（例如：<a href="https://www.openssl.org/source/openssl-1.1.1.tar.gz" target="_blank" rel="noopener">1.1.1</a>）。</p></li><li><p>下载并安装 <a href="http://strawberryperl.com" target="_blank" rel="noopener">Strawberry Perl</a>（例如：<a href="http://strawberryperl.com/download/5.28.0.1/strawberry-perl-5.28.0.1-64bit.msi" target="_blank" rel="noopener">5.28.0.1 x64</a>）。</p></li><li><p>下载并安装 <a href="https://visualstudio.microsoft.com" target="_blank" rel="noopener">Visual Studio 2017</a>（例如：<a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&rel=15" target="_blank">Community</a>）。</p></li><li><p>下载并安装 <a href="https://www.nasm.us" target="_blank" rel="noopener">NASM</a>（例如：<a href="https://www.nasm.us/pub/nasm/releasebuilds/2.13.03/win64/nasm-2.13.03-installer-x64.exe" target="_blank" rel="noopener">2.13.03 x64</a>）。你可能需要手动将 NASM 的安装路径添加到 PATH。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2></li><li><p>在开始菜单以管理员身份运行 <strong>VS2017 开发者命令行工具</strong>。</p></li><li><p>将当前路径更改到 OpenSSL 源代码解压到的路径。</p></li><li><p>依次运行下列命令：</p><figure class="highlight powershell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">perl Configure VC-WIN32</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nmake</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">nmake test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">nmake install</span></pre></td></tr></table></figure><pre><code></code></pre></li><li><p>将 “<strong>C:\Program Files (x86)\OpenSSL\bin</strong>“ 添加到 PATH。</p></li></ul><h2 id="问题与解决方案"><a href="#问题与解决方案" class="headerlink" title="问题与解决方案"></a>问题与解决方案</h2><ul><li>运行 “<code>perl Configure VC-WIN32</code>“ 时失败。尝试用 “<code>perl Configure VC-WIN32 no-asm</code>“ 替代运行。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍在 Windows 操作系统上安装 OpenSSL 的方法已经相关问题的解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://aizhengpeng.cn/categories/technologies/"/>
    
    
      <category term="Windows" scheme="https://aizhengpeng.cn/tags/windows/"/>
    
  </entry>
  
</feed>
